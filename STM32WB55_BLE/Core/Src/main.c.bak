/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"
#include <IOT511_Hardware_Iniciar.h>
#include <Servicio_Info_Disp.h>
#include <ST25R3916_NFC.h>
#include "HAL_GPIO.h"
#include "HAL_IWDG.h"
#include "Flash.h"
#include "Tarea_Bajo_Consumo.h"
#include "Tarea_Cerradura.h"
#include "Tarea_Deteccion.h"
#include "Tarea_Modem.h"
#include "Tarea_NFC.h"
#include "Tarea_Seguridad.h"
#include "Tarea_RTC.h"
#include "Tarea_WatchDog.h"
#include "Tarea_Senalizacion.h"
#include "Tarea_Consola.h"
#include "Tarea_Eventos.h"
#include "Tarea_ADC.h"


/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

I2C_HandleTypeDef hi2c1;

IPCC_HandleTypeDef hipcc;

RNG_HandleTypeDef hrng;

RTC_HandleTypeDef hrtc;

SPI_HandleTypeDef hspi1;

UART_HandleTypeDef hlpuart1;
UART_HandleTypeDef huart1;
DMA_HandleTypeDef hdma_lpuart1_tx;
DMA_HandleTypeDef hdma_lpuart1_rx;
DMA_HandleTypeDef hdma_usart1_tx;
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_adc1;
//static nfc4_t nfc4;

/* USER CODE BEGIN PV */

//! Tamaño del mensaje a enviar por la consola
#define MAIN_TAM_MENSAJE_CONSOLA			72
//! Buffer para guardar el mensaje a enviar por la consola
char pBufferConsolaMain [MAIN_TAM_MENSAJE_CONSOLA];
//! Buffer para guardar el mensaje a enviar por la consola
char pBufferWatchdogMain [MAIN_TAM_MENSAJE_CONSOLA];
//! Buffer para guardar el mensaje de error en lectura de flash
char pBufferErrLecFlash [MAIN_TAM_MENSAJE_CONSOLA];
//! Parámetros para enviar por la consola Man
tParametrosCola parametrosColaMain;
//! Parámetros para enviar por la consola Watchdog
tParametrosCola parametrosColaWatchdog;
//! Parámetros para enviar por la consola error en lectura de flash
tParametrosCola parametrosColaErrLecFlash;
//! Flag que se activa si el reset ha ocurrido por watchog
uint8_t resetWatchdogFlag;
//! Descriptor SPI2
static void *pSPI2Handler;
//! Buffer empleado para guardar los datos leidos desde la memoria Flash
static uint8_t mainRxBuffer[20];
//! Modo de operación leído desde flash
static uint8_t modoOperacionFlash;

static uint8_t errLecModOpFlash;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void PeriphCommonClock_Config(void);

static void MX_DMA_Init(void);
static void MX_IPCC_Init(void);
static void MX_RNG_Init(void);

void StartDefaultTask(void *argument);
void StartTask02(void *argument);
void StartTask03(void *argument);
void StartTask04(void *argument);
void StartTask05(void *argument);
void StartTask06(void *argument);
static uint8_t Reset_Por_Watchdog_Flag(void);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();

  /* IPCC initialisation */
   MX_IPCC_Init();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

   /*##-1- Check if the system has resumed from WWDG reset ####################*/
 	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST) != 0x00u)
 	{
 		resetWatchdogFlag = 1;
 	}

   	/* Clear reset flags in any case */
   		 __HAL_RCC_CLEAR_RESET_FLAGS();

	MX_DMA_Init();
	MX_RNG_Init();
	IOT511_Hardware_Iniciar();
	IOT511_Hardware_Iniciar_Get_Handler( &pSPI2Handler, IOT511_HARDWARE_INICIAR_SPI2 );
	Flash_Iniciar(pSPI2Handler);
	memset(mainRxBuffer, 0, FLASH_TAMANO_MODO_DE_OPERACION);
	if(Flash_Leer_Modo_de_Operacion(mainRxBuffer, 								\
			FLASH_TAMANO_MODO_DE_OPERACION) < 0) {
		errLecModOpFlash=1;
   		modoOperacionFlash = 0;
	} else {
		errLecModOpFlash=0;
		modoOperacionFlash = mainRxBuffer [0];
	}


  /* USER CODE BEGIN 2 */

  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
	osKernelInitialize();

#ifdef TAREA_BAJO_CONSUMO_ACTIVADA
#if TAREA_BAJO_CONSUMO_ACTIVADA
	if( NULL ==  Tarea_Bajo_Consumo_Iniciar() ){
		  // No hay suficiente memoria para iniciar la tarea, no se puede arrancar el sistema
		  while( 1 );
	}
#endif
#endif
	if(modoOperacionFlash >= 0 && modoOperacionFlash <= 2){
		if( NULL ==  Tarea_Cerradura_Iniciar() ){
			  // No hay suficiente memoria para iniciar la tarea, no se puede arrancar el sistema
			  while( 1 );
		}
	}
	if( NULL ==  Tarea_Deteccion_Iniciar() ){
		  // No hay suficiente memoria para iniciar la tarea, no se puede arrancar el sistema
		  while( 1 );
	}
	if ( modoOperacionFlash == 0 || (modoOperacionFlash >= 2 && modoOperacionFlash <= 2) ){
		if( NULL == Tarea_NFC_Iniciar() ){
			  // No hay suficiente memoria para iniciar la tarea, no se puede arrancar el sistema
			  while( 1 );
		}
	}
#ifdef TAREA_SEGURIDAD_ACTIVADA
#if TAREA_SEGURIDAD_ACTIVADA
	if( NULL == Tarea_Seguridad_Iniciar() ){
		  // No hay suficiente memoria para iniciar la tarea, no se puede arrancar el sistema
		  while( 1 );
	}
#endif
#endif
	if( NULL == Tarea_RTC_Iniciar() ){
		  // No hay suficiente memoria para iniciar la tarea, no se puede arrancar el sistema
		  while( 1 );
	}
	if( NULL == Tarea_ADC_Iniciar() ){
		  // No hay suficiente memoria para iniciar la tarea, no se puede arrancar el sistema
		  while( 1 );
	}
	if ( (modoOperacionFlash >= 0 && modoOperacionFlash <= 1 ) || modoOperacionFlash == 3 ){
		if( NULL ==  Tarea_Modem_Iniciar() ){
			  // No hay suficiente memoria para iniciar la tarea, no se puede arrancar el sistema
			  while( 1 );
		}
	}
	if( NULL == Tarea_Senalizacion_Iniciar() ){
		  // No hay suficiente memoria para iniciar la tarea, no se puede arrancar el sistema
		  while( 1 );
	}
	if( NULL == Tarea_Consola_Iniciar() ){
		  // No hay suficiente memoria para iniciar la tarea, no se puede arrancar el sistema
		  while( 1 );
	}
	if( NULL == Tarea_Eventos_Iniciar() ){
		  // No hay suficiente memoria para iniciar la tarea, no se puede arrancar el sistema
		  while( 1 );
	}
#ifdef HAL_IWDG_WATCHDOG_ACTIVADO
#if HAL_IWDG_WATCHDOG_ACTIVADO
	if( NULL == Tarea_WatchDog_Iniciar() ){
		  // No hay suficiente memoria para iniciar la tarea, no se puede arrancar el sistema
		  while( 1 );
	}
#endif
#endif

	/* Init code for STM32_WPAN */
	MX_APPE_Init();

	if(errLecModOpFlash==1) {
		//Error en lectura de flash!
  		memset(pBufferErrLecFlash, 0, MAIN_TAM_MENSAJE_CONSOLA);
   		sprintf(pBufferErrLecFlash, "*** Error en lectura de modo operacion desde flash ***\r\n");
   		parametrosColaErrLecFlash.pTrazaCola = (uint8_t *) pBufferErrLecFlash;
   		parametrosColaErrLecFlash.longitudTrazaCola = strnlen(pBufferErrLecFlash, MAIN_TAM_MENSAJE_CONSOLA);
   		Tarea_Consola_Enviar_Traza( &parametrosColaErrLecFlash );
	} else {
		memset(pBufferErrLecFlash, 0, MAIN_TAM_MENSAJE_CONSOLA);
		sprintf(pBufferErrLecFlash, "modoOperacionFlash = %d\r\n",modoOperacionFlash);
		parametrosColaErrLecFlash.pTrazaCola = (uint8_t *) pBufferErrLecFlash;
		parametrosColaErrLecFlash.longitudTrazaCola = strnlen(pBufferErrLecFlash, MAIN_TAM_MENSAJE_CONSOLA);
		Tarea_Consola_Enviar_Traza( &parametrosColaErrLecFlash );
	}

	if(Reset_Por_Watchdog_Flag() == 1){
  		memset(pBufferWatchdogMain, 0, MAIN_TAM_MENSAJE_CONSOLA);
   		sprintf(pBufferWatchdogMain, "El sistema se ha resetado por watchdog\r\n");
   		parametrosColaWatchdog.pTrazaCola = (uint8_t *) pBufferWatchdogMain;
   		parametrosColaWatchdog.longitudTrazaCola = strnlen(pBufferWatchdogMain, MAIN_TAM_MENSAJE_CONSOLA);
   		Tarea_Consola_Enviar_Traza( &parametrosColaWatchdog );
	}

	memset(pBufferConsolaMain, 0, MAIN_TAM_MENSAJE_CONSOLA);
	sprintf(pBufferConsolaMain, "BLE iniciado\r\n");
	parametrosColaMain.pTrazaCola = (uint8_t *) pBufferConsolaMain;
	parametrosColaMain.longitudTrazaCola = strnlen(pBufferConsolaMain, MAIN_TAM_MENSAJE_CONSOLA);
	Tarea_Consola_Enviar_Traza( &parametrosColaMain );

	/* Start scheduler */
	osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};




  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}

/**
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{

  /* USER CODE BEGIN IPCC_Init 0 */

  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}

/**
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{

  /* USER CODE BEGIN RNG_Init 0 */

  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
  if (HAL_RNG_Init(&hrng) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();
  __HAL_RCC_DMA2_CLK_ENABLE();

}

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM17 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/* Function of FreeRTOS that feeds the watchdog
 *
 */
void vApplicationIdleHook (void){

}
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

/*! Esta funcion notifica el reset por watchdog
 * Cada vez que se lee la variable flag, su valor se resetea
 * @return Flag de reset por watchdog
 */
static uint8_t Reset_Por_Watchdog_Flag(void)
{
	if( resetWatchdogFlag != 0 ){
		resetWatchdogFlag = 0;
		return 1;
	}
	return 0;
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
